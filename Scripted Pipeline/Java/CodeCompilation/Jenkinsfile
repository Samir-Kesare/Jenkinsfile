// node {
//     stage('Checkout GIT') {
//         checkout scm: [
//             $class: 'GitSCM',
//             branches: [[name: '*/main']],
//             userRemoteConfigs: [[url: 'https://github.com/Panu-S-Harshit-Ninja-07/OT-Salary-API.git']]
//         ]
//         sh 'ls $WORKSPACE/'
//     }
    
//     stage('Starting Code Compilation') {
//         echo 'Starting Java Code Compilation..........'
//         sh 'mvn clean compile'
//     }
// }

node {
    try {
        stage('Checkout GIT') {
            checkout scm: [
                $class: 'GitSCM',
                branches: [[name: '*/main']],
                userRemoteConfigs: [[url: 'https://github.com/Panu-S-Harshit-Ninja-07/OT-Salary-API.git']]
            ]
            sh 'ls $WORKSPACE/'
        }
        
        stage('Starting Code Compilation') {
            echo 'Starting Java Code Compilation..........'
            sh 'mvn clean compile'
        }
        echo 'Compiled Successfully'
    } catch (e) {
        echo 'Compilation Failed'

        // Since we're catching the exception in order to report on it,
        // we need to re-throw it, to ensure that the build is marked as failed
        throw e
    } finally {
        def currentResult = currentBuild.result ?: 'SUCCESS'
        if (currentResult == 'UNSTABLE') {
            echo 'This will run only if the run was marked as unstable'
        }

        def previousResult = currentBuild.previousBuild?.result
        if (previousResult != null && previousResult != currentResult) {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }

        echo 'This will always run'
        cleanWs cleanWhenSuccess: false

    }
}
